// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // OAuth connections
  accounts Account[]
  sessions Session[]

  // Job-related relationships
  applications JobApplication[]
  savedJobs    SavedJob[]
  profile      UserProfile?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core Job-related models
model Company {
  id          String  @id @default(cuid())
  name        String  @unique @db.VarChar(255)
  website     String? @db.VarChar(500)
  tagline     String? @db.Text
  industry    String? @db.VarChar(100)
  employees   Int?
  founded     Int?
  headquarters String? @db.VarChar(100)
  isPublic    Boolean @default(false)
  logo        String? @db.VarChar(500)
  description String? @db.Text
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  jobs        Job[]
  
  // Indexes for search performance
  @@index([name])
  @@index([industry])
  @@index([employees])
  @@map("companies")
}

model Job {
  id                  String    @id // Using external ID as primary key
  title               String    @db.VarChar(255)
  coreTitle           String?   @db.VarChar(255)
  description         String?   @db.Text
  requirements        String?   @db.Text
  
  // Location and work arrangement
  location            String?   @db.VarChar(255)
  workType            WorkType  @default(ONSITE)
  
  // Employment details
  jobTypes            JobType[]
  experience          String?   @db.VarChar(100)
  managementExperience String?  @db.VarChar(100)
  category            String?   @db.VarChar(100)
  roleType            RoleType? 
  seniorityLevel      SeniorityLevel?
  
  // Compensation
  salary              String?   @db.VarChar(100)
  salaryMin           Int?      // Parsed minimum salary
  salaryMax           Int?      // Parsed maximum salary
  salaryCurrency      String?   @db.VarChar(10)
  
  // External links
  applyUrl            String?   @db.VarChar(1000)
  
  // Timestamps
  postedDate          DateTime?
  expiresAt           DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relationships
  companyId           String
  company             Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  skills              JobSkill[]
  applications        JobApplication[]
  savedByUsers        SavedJob[]
  
  // Full-text search
  searchVector        String?   @db.Text // For PostgreSQL full-text search
  
  // Indexes for performance
  @@index([title])
  @@index([category])
  @@index([workType])
  @@index([seniorityLevel])
  @@index([postedDate])
  @@index([salaryMin, salaryMax])
  @@index([companyId])
  @@map("jobs")
}

model Skill {
  id          String     @id @default(cuid())
  name        String     @unique @db.VarChar(100)
  category    String?    @db.VarChar(50)
  description String?    @db.Text
  
  // Metadata
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relationships
  jobs        JobSkill[]
  userSkills  UserSkill[]
  
  @@index([name])
  @@index([category])
  @@map("skills")
}

model JobSkill {
  id      String @id @default(cuid())
  jobId   String
  skillId String
  
  // Relationships
  job     Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@unique([jobId, skillId])
  @@map("job_skills")
}

model UserProfile {
  id                String      @id @default(cuid())
  userId            String      @unique
  bio               String?     @db.Text
  experience        String?     @db.VarChar(100)
  location          String?     @db.VarChar(255)
  resume            String?     @db.VarChar(500) // File path or URL
  portfolio         String?     @db.VarChar(500)
  linkedin          String?     @db.VarChar(500)
  github            String?     @db.VarChar(500)
  website           String?     @db.VarChar(500)
  
  // Job preferences
  preferredWorkType WorkType?
  preferredSalaryMin Int?
  preferredSalaryMax Int?
  preferredLocations String[]   // Array of preferred locations
  
  // Metadata
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  // Relationships
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills            UserSkill[]
  
  @@map("user_profiles")
}

model UserSkill {
  id          String  @id @default(cuid())
  userId      String
  skillId     String
  proficiency Int     @default(1) @db.SmallInt // 1-5 scale
  yearsExp    Int?    @db.SmallInt
  
  // Relationships
  user        UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill       Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)
  
  @@unique([userId, skillId])
  @@map("user_skills")
}

model JobApplication {
  id          String            @id @default(cuid())
  userId      String
  jobId       String
  status      ApplicationStatus @default(APPLIED)
  coverLetter String?           @db.Text
  notes       String?           @db.Text
  
  // Timestamps
  appliedAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relationships
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  job         Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@unique([userId, jobId])
  @@index([status])
  @@index([appliedAt])
  @@map("job_applications")
}

model SavedJob {
  id        String   @id @default(cuid())
  userId    String
  jobId     String
  notes     String?  @db.Text
  
  // Timestamps
  savedAt   DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@unique([userId, jobId])
  @@index([savedAt])
  @@map("saved_jobs")
}

// Enums with comprehensive edge cases
enum WorkType {
  REMOTE
  ONSITE
  HYBRID
  FLEXIBLE
  UNKNOWN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  TEMPORARY
  INTERNSHIP
  FREELANCE
  VOLUNTEER
  SEASONAL
  UNKNOWN
}

enum RoleType {
  INDIVIDUAL_CONTRIBUTOR
  PEOPLE_MANAGER
  TECHNICAL_LEAD
  EXECUTIVE
  CONSULTANT
  UNKNOWN
}

enum SeniorityLevel {
  INTERN
  ENTRY_LEVEL
  MID_LEVEL
  SENIOR_LEVEL
  STAFF_LEVEL
  PRINCIPAL_LEVEL
  DIRECTOR_LEVEL
  VP_LEVEL
  C_LEVEL
  UNKNOWN
}

enum ApplicationStatus {
  APPLIED
  SCREENING
  INTERVIEW_SCHEDULED
  INTERVIEWED
  OFFER_RECEIVED
  ACCEPTED
  REJECTED
  WITHDRAWN
  ON_HOLD
}
